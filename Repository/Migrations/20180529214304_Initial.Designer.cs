// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Repository;
using System;

namespace Repository.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20180529214304_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Data.DBModels.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Avatar");

                    b.Property<bool>("Blocked");

                    b.Property<string>("Email");

                    b.Property<string>("Password");

                    b.Property<string>("PasswordSalt");

                    b.Property<int>("RoleId");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("Data.DBModels.AccountToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccountId");

                    b.Property<string>("AuthToken");

                    b.Property<DateTime>("AuthTokenExpires");

                    b.Property<string>("RefreshToken");

                    b.Property<DateTime>("RefreshTokenExpires");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("AccountToken");
                });

            modelBuilder.Entity("Data.DBModels.AccountVerification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccountId");

                    b.Property<string>("CodeVerification");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("AccountVerification");
                });

            modelBuilder.Entity("Data.DBModels.Beer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Alcohol");

                    b.Property<int>("BreweryId");

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("BreweryId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("Beer");
                });

            modelBuilder.Entity("Data.DBModels.BeerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("BeerType");
                });

            modelBuilder.Entity("Data.DBModels.BeerTypeBeer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BeerId");

                    b.Property<int>("BeerTypeId");

                    b.HasKey("Id");

                    b.HasIndex("BeerId");

                    b.HasIndex("BeerTypeId");

                    b.ToTable("BeerTypeBeer");
                });

            modelBuilder.Entity("Data.DBModels.Brewery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("NumberOfBuilding");

                    b.Property<string>("Place");

                    b.Property<string>("PostOffice");

                    b.Property<string>("PostalCode");

                    b.Property<int>("ProductId");

                    b.Property<string>("Street");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("Brewery");
                });

            modelBuilder.Entity("Data.DBModels.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccountId");

                    b.Property<string>("Content");

                    b.Property<DateTime>("Date");

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ProductId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Data.DBModels.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("Shortcut");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Data.DBModels.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccountId");

                    b.Property<int>("CountryId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<bool>("IsBeer");

                    b.Property<string>("Name");

                    b.Property<string>("Picture");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CountryId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Data.DBModels.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Data.DBModels.Vote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccountId");

                    b.Property<int>("ProductId");

                    b.Property<int>("VoteValue");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ProductId");

                    b.ToTable("Vote");
                });

            modelBuilder.Entity("Data.DBModels.Account", b =>
                {
                    b.HasOne("Data.DBModels.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Data.DBModels.AccountToken", b =>
                {
                    b.HasOne("Data.DBModels.Account", "Account")
                        .WithOne("AccountToken")
                        .HasForeignKey("Data.DBModels.AccountToken", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.DBModels.AccountVerification", b =>
                {
                    b.HasOne("Data.DBModels.Account", "Account")
                        .WithOne("AccountVerification")
                        .HasForeignKey("Data.DBModels.AccountVerification", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.DBModels.Beer", b =>
                {
                    b.HasOne("Data.DBModels.Brewery", "Brewery")
                        .WithMany("Beers")
                        .HasForeignKey("BreweryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Data.DBModels.Product", "Product")
                        .WithOne("Beer")
                        .HasForeignKey("Data.DBModels.Beer", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.DBModels.BeerTypeBeer", b =>
                {
                    b.HasOne("Data.DBModels.Beer", "Beer")
                        .WithMany("BeerTypeBeers")
                        .HasForeignKey("BeerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Data.DBModels.BeerType", "BeerType")
                        .WithMany("BeerTypeBeers")
                        .HasForeignKey("BeerTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Data.DBModels.Brewery", b =>
                {
                    b.HasOne("Data.DBModels.Product", "Product")
                        .WithOne("Brewery")
                        .HasForeignKey("Data.DBModels.Brewery", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.DBModels.Comment", b =>
                {
                    b.HasOne("Data.DBModels.Account", "Account")
                        .WithMany("Comments")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Data.DBModels.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Data.DBModels.Product", b =>
                {
                    b.HasOne("Data.DBModels.Account", "Account")
                        .WithMany("Products")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Data.DBModels.Country", "Country")
                        .WithMany("Products")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Data.DBModels.Vote", b =>
                {
                    b.HasOne("Data.DBModels.Account", "Account")
                        .WithMany("Votes")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Data.DBModels.Product", "Product")
                        .WithMany("Votes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
